<?xml version="1.0" encoding="US-ASCII" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>

<rfc 
    category="std" 
    docName="coe-151-mp1-protocol-05" 
    ipr="trust200902" 
    consensus="no" 
    submissionType="independent" 
    updates="5" 
    xml:lang="en"
>
    <front>
        <title abbrev="CoE 151 MP Protocol">
            Server-Client and Peer-Peer Communication Protocol
        </title>

        <author fullname="Keith Vargas" initials="K." surname="Vargas">
            <organization abbrev="EEEI">Electrical and Electronics Engineering Institute</organization>
            <address>
                <postal>
                    <street>P. Velasquez St.</street>
                    <city>Quezon City</city>
                    <region>Metro Manila</region>
                    <code>1101</code>
                    <country>Philippines</country>
                </postal>
                <email>keith.vargas@eee.upd.edu.ph</email>
            </address>
        </author>

        <!-- Insert yourselves here using the author element similar to mine above -->

        <date year="2020" month="March" />
        <area>General</area>
        <workgroup>CoE 151</workgroup>
        <keyword>MP1</keyword>

        <abstract>
            <t>
                This document describes the communication protocol of the server-client model and
                peer-peer model. This will not cover rules and restrictions for implementations of
                the control logic and processing of user input. Message formats are described along
                with their use cases. Handshake / login, state transitions, and terminations are 
                also described below.
            </t>
        </abstract>

        <note title="Disclaimer">
            <t>
                The template used is from <xref target="RFC3470"/>. The document attempts to follow
                guidelines set in <xref target="RFC6949"/>.
            </t>
        </note>
    </front>
    <middle>
        <section anchor="intro" title="Introduction">
            <t>
                Chat servers are simple applications if written by a single entity. The lack of 
                implementation rules adds complexity on ensuring that two applications communicate
                with each other properly. 
            </t>
        </section>
        <section anchor="mtypes" title="Message Formats">
            <section anchor="mintro" title="Introduction">
                <t>
                    Messages sent by both server-client and peer-peer models shall be encoded in
                    JavaScript Object Notation (JSON). This is to simplify the parsing process in
                    the individual implementations. There are several valid fields of the messages 
                    for this protocol. Message formats are identified by the field "mtp". The particular 
                    information for the rest of the fields will be discussed in detail in their 
                    respective use cases in the message formats.
                </t>
            </section>
            <section anchor="serverbound" title="Serverbound Messages">
                <section anchor="Login" title="Login">
                    <t>
                        This is the first packet a client should send to the server. A sample message of
                        this format is shown below:
                    </t>
                    <t>
                        {"mtp": "Login", "data": {"name": "username"}}
                    </t>
                    <texttable title="Login Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Login messages have this value set to "Login"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Client Name. The username that the client requests to use to join the server.</c>
                    </texttable>
                    <t>
                        The server must send an AssignUsername message as a response to this message. This is
                        discussed in detail in <xref target="server-client-state-login"/>
                    </t>
                </section>
                <section anchor="SetUsername" title="SetUsername">
                    <t>
                        On the scenario that a client wishes to change usernames, this message will be sent to
                        the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "SetUsername", "data": {"name": "new_name"}}
                    </t>
                    <texttable title="SetUsername Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SetUsername messages have this value set to "SetUsername"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Requested new name by the client.</c>
                    </texttable>
                    <t>
                        The server must send a SetUsername message as a response to this message. This is
                        discussed in detail in <xref target="server-client-behavior-changename"/>
                    </t>
                </section> 
                <section anchor="RequestUserInfo" title="RequestUserInfo">
                    <t>
                        On the scenario that a client wishes to view a user's network information, this message will be 
                        sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "RequestUserInfo", "data": {"name": "username"}}
                    </t>
                    <texttable title="RequestUserInfo Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All RequestUserInfo messages have this value set to "RequestUserInfo"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user whose information is being requested.</c>
                    </texttable>
                    <t>
                        The server must send a ProvideUserInfo message as a response to this message. This is
                        discussed in detail in <xref target="server-client-behavior-userinfo"/>
                    </t>
                </section>
                <section anchor="RequestLocalTime" title="RequestLocalTime">
                    <t>
                        On the scenario that a client wishes to change usernames, this message will be sent
                        to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "RequestLocalTime", "data": {}}
                    </t>
                    <texttable title="RequestLocalTime Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All RequestLocalTime messages have this value set to "RequestLocalTime"</c>
                    </texttable>
                    <t>
                        The server must send a SendLocalTime message as a response to this message. This is
                        discussed in detail in <xref target="server-client-behavior-localtime"/>
                    </t>
                </section>
                <section anchor="WhisperToUser" title="WhisperToUser">
                    <t>
                        On the scenario that a client wishes to send a private message to another user, this 
                        message will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "WhisperToUser", "data": {"to": ["user1", "user2", "user3"], "message": "hi"}}
                    </t>
                    <texttable title="WhisperToUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All WhisperToUser messages have this value set to "WhisperToUser"</c>
        
                        <c>to</c>
                        <c>array of strings</c>
                        <c>List of users the private message is addressed to.</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>The private message to be sent.</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-whisper"/>
                    </t>
                </section>
                <section anchor="SendChat" title="SendChat">
                    <t>
                        On the scenario that a client wishes to send a message to everyone online, this 
                        message will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "SendChat", "data": {"message": "hi"}}
                    </t>
                    <texttable title="SendChat Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SendChat messages have this value set to "SendChat"</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>The message to be sent.</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-sendchat"/>
                    </t>
                </section>
                <section anchor="RequestOnlineList" title="RequestOnlineList">
                    <t>
                        On the scenario that a client wishes to know all online users in the server, this 
                        message will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "RequestOnlineList", "data": {}}
                    </t>
                    <texttable title="RequestOnlineList Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All RequestOnlineList messages have this value set to "RequestOnlineList"</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-onlinelist"/>
                    </t>
                </section>
                <section anchor="Disconnect" title="Disconnect">
                    <t>
                        On the scenario that a client wishes to disconnect, this message will be sent to the 
                        server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "Disconnect", "data": {}}
                    </t>
                    <texttable title="Disconnect Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Disconnect messages have this value set to "Disconnect"</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-disconnect"/>
                    </t>
                </section>
                <section anchor="KickUser" title="KickUser">
                    <t>
                        On the scenario that an admin wishes to remove a user from the server, this message 
                        will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "KickUser", "data": {"name": "username"}}
                    </t>
                    <texttable title="KickUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All KickUser messages have this value set to "KickUser"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user to be kicked out of the server</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-kickuser"/>
                    </t>
                </section>
                <section anchor="MuteUser" title="MuteUser">
                    <t>
                        On the scenario that an admin wishes to mute a user in the server, this message 
                        will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "MuteUser", "data": {"name": "username"}}
                    </t>
                    <texttable title="MuteUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All MuteUser messages have this value set to "MuteUser"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user to be muted in the server</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-muteuser"/>
                    </t>
                </section>
                <section anchor="UnmuteUser" title="UnmuteUser">
                    <t>
                        On the scenario that an admin wishes to unmute a user in the server, this message 
                        will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "UnmuteUser", "data": {"name": "username"}}
                    </t>
                    <texttable title="UnmuteUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All UnmuteUser messages have this value set to "UnmuteUser"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user to be unmuted in the server</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-unmuteuser"/>
                    </t>
                </section>
                <section anchor="SetAsAdmin" title="SetAsAdmin">
                    <t>
                        On the scenario that an admin wishes to set another user as the admin, this message 
                        will be sent to the server. A sample message of this format is shown below:
                    </t>
                    <t>
                        {"mtp": "SetAsAdmin", "data": {"name": "username"}}
                    </t>
                    <texttable title="SetAsAdmin Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SetAsAdmin messages have this value set to "SetAsAdmin"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user to be set as the new admin in the server</c>
                    </texttable>
                    <t>
                        Behavior is discussed in detail in <xref target="server-client-behavior-setasadmin"/>
                    </t>
                </section>
            </section>
            <section anchor="clientbound" title="Clientbound Messages">
                <section anchor="AssignUsername" title="AssignUsername">
                    <t>
                        This is the message sent by the server to the client after receiving a Login message.
                    </t>
                    <t>
                        If the requested username is valid:
                    </t>
                    <t>
                        {"mtp": "AssignUsername", "data": {"name": "username"}, "status": "OK"}
                    </t>
                    <t>
                        If the requested username has a duplicate:
                    </t>
                    <t>
                        {"mtp": "AssignUsername", "data": {"name": "username"}, "status": "DuplicateError"}
                    </t>
                    <texttable title="AssignUsername Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All AssignUsername messages have this value set to "AssignUsername"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Accepted / Rejected username.</c>

                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "DuplicateError". Status of the Login message previously sent.</c>
                    </texttable>
                </section>
                <section anchor="ServerSetUsername" title="SetUsername">
                    <t>
                        This is the message sent by the server to the client after receiving a SetUsername message.
                    </t>
                    <t>
                        If the requested username is valid:
                    </t>
                    <t>
                        {"mtp": "SetUsername", "data": {"name": "username"}, "status": "OK"}
                    </t>
                    <t>
                        If the requested username has a duplicate:
                    </t>
                    <t>
                        {"mtp": "SetUsername", "data": {"name": "username"}, "status": "DuplicateError"}
                    </t>
                    <texttable title="SetUsername Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SetUsername messages have this value set to "SetUsername"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Accepted / Rejected username.</c>

                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "DuplicateError". Status of the SetUsername message 
                            previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="ProvideUserInfo" title="ProvideUserInfo">
                    <t>
                        This is the message sent by the server to the client after receiving a 
                        RequestUserInfo message.
                    </t>
                    <t>
                        If the requested user is online the server:
                    </t>
                    <t>
                        {"mtp": "ProvideUserInfo", "data": {"name": "username", 
                        "ip": "192.168.1.1", "port": 15151}, "status": "OK"}
                    </t>
                    <t>
                        If the requested user does not exist:
                    </t>
                    <t>
                        {"mtp": "ProvideUserInfo", "data": {"name": "username", 
                        "ip": "192.168.1.1", "port": 15151}, "status": "UserDoesNotExist"}
                    </t>
                    <texttable title="ProvideUserInfo Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All ProvideUserInfo messages have this value set to "ProvideUserInfo"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the requested user.</c>
        
                        <c>ip</c>
                        <c>string</c>
                        <c>IP of the requested user.</c>
        
                        <c>port</c>
                        <c>integer</c>
                        <c>Port of the requested user.</c>

                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "UserDoesNotExist". Status of the RequestUserInfo message 
                            previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="SendLocalTime" title="SendLocalTime">
                    <t>
                        This is the message sent by the server to the client after receiving a 
                        RequestLocalTime message.
                    </t>
                    <t>
                        {"mtp": "SendLocalTime", "data": {"time": "08:30:55"}}
                    </t>
                    <texttable title="SendLocalTime Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SendLocalTime messages have this value set to "SendLocalTime"</c>
        
                        <c>time</c>
                        <c>string</c>
                        <c>ISO 8601 formatted time.</c>
                    </texttable>
                </section>
                <section anchor="WhisperFromUser" title="WhisperFromUser">
                    <t>
                        This is the message sent by the server to the targetted client after receiving a 
                        WhisperToUser message. A private message sent to a user.
                    </t>
                    <t>
                        {"mtp": "WhisperFromUser", "data": {"from": "username", "message": "hi"}}
                    </t>
                    <texttable title="WhisperFromUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All WhisperFromUser messages have this value set to "WhisperFromUser"</c>
        
                        <c>from</c>
                        <c>string</c>
                        <c>Name of the user who sent the message.</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>Private message content.</c>
                    </texttable>
                </section>
                <section anchor="SendChatFromUser" title="SendChatFromUser">
                    <t>
                        This is the message sent by the server to all clients except the source after 
                        receiving a SendChat message.
                    </t>
                    <t>
                        {"mtp": "SendChatFromUser", "data": {"name": "username", "message": "hi"}}
                    </t>
                    <texttable title="SendChatFromUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SendChatFromUser messages have this value set to "SendChatFromUser"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Name of the user who sent the message.</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>Message content.</c>
                    </texttable>
                </section>
                <section anchor="SendOnlineList" title="SendOnlineList">
                    <t>
                        This is the message sent by the server after receiving a RequestOnlineList message.
                    </t>
                    <t>
                        {"mtp": "SendOnlineList", "data": {"names": ["user1", "user2", "user3"]}}
                    </t>
                    <texttable title="SendOnlineList Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SendOnlineList messages have this value set to "SendOnlineList"</c>
        
                        <c>names</c>
                        <c>array of string</c>
                        <c>Name of the users who are online in the server.</c>
                    </texttable>
                </section>
                <section anchor="ServerKickUser" title="KickUser">
                    <t>
                        This is the message sent by the server after receiving a KickUser message from the client.
                    </t>
                    <t>
                        If a kick is successful:
                    </t>
                    <t>
                        {"mtp": "KickUser", "data": {}, status="OK"}
                    </t>
                    <t>
                        If the requesting client is not an admin:
                    </t>
                    <t>
                        {"mtp": "KickUser", "data": {}, status="NotAdminError"}
                    </t>
                    <t>
                        If the requested user is not online in the server:
                    </t>
                    <t>
                        {"mtp": "KickUser", "data": {}, status="UserDoesNotExist"}
                    </t>
                    <texttable title="KickUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All KickUser messages have this value set to "KickUser"</c>
        
                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "UserDoesNotExist", "NotAdminError". Status of the KickUser message 
                            previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="ServerMuteUser" title="MuteUser">
                    <t>
                        This is the message sent by the server after receiving a MuteUser message from the client.
                    </t>
                    <t>
                        If a mute is successful:
                    </t>
                    <t>
                        {"mtp": "MuteUser", "data": {}, status="OK"}
                    </t>
                    <t>
                        If the requesting client is not an admin:
                    </t>
                    <t>
                        {"mtp": "MuteUser", "data": {}, status="NotAdminError"}
                    </t>
                    <t>
                        If the requested user is not online in the server:
                    </t>
                    <t>
                        {"mtp": "MuteUser", "data": {}, status="UserDoesNotExist"}
                    </t>
                    <t>
                        If the requested user is already muted:
                    </t>
                    <t>
                        {"mtp": "MuteUser", "data": {}, status="UserAlreadyMuted"}
                    </t>
                    <texttable title="MuteUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>

                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All MuteUser messages have this value set to "MuteUser"</c>
        
                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "UserDoesNotExist", "NotAdminError", "UserAlreadyMuted". 
                            Status of the MuteUser message previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="ServerUnmuteUser" title="UnmuteUser">
                    <t>
                        This is the message sent by the server after receiving a UnmuteUser message from the client.
                    </t>
                    <t>
                        If an unmute is successful:
                    </t>
                    <t>
                        {"mtp": "UnmuteUser", "data": {}, status="OK"}
                    </t>
                    <t>
                        If the requesting client is not an admin:
                    </t>
                    <t>
                        {"mtp": "UnmuteUser", "data": {}, status="NotAdminError"}
                    </t>
                    <t>
                        If the requested user is not online in the server:
                    </t>
                    <t>
                        {"mtp": "UnmuteUser", "data": {}, status="UserDoesNotExist"}
                    </t>
                    <t>
                        If the requested user is already unmuted:
                    </t>
                    <t>
                        {"mtp": "UnmuteUser", "data": {}, status="UserAlreadyUnmuted"}
                    </t>
                    <texttable title="UnmuteUser Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>

                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All UnmuteUser messages have this value set to "UnmuteUser"</c>
        
                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "UserDoesNotExist", "NotAdminError", "UserAlreadyUnmuted". 
                            Status of the UnmuteUser message previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="ServerSetAsAdmin" title="SetAsAdmin">
                    <t>
                        This is the message sent by the server after receiving a SetAsAdmin message from the client.
                    </t>
                    <t>
                        If an admin privilege transfer is successful:
                    </t>
                    <t>
                        {"mtp": "SetAsAdmin", "data": {}, status="OK"}
                    </t>
                    <t>
                        If the requesting client is not an admin:
                    </t>
                    <t>
                        {"mtp": "SetAsAdmin", "data": {}, status="NotAdminError"}
                    </t>
                    <t>
                        If the requested user is not online in the server:
                    </t>
                    <t>
                        {"mtp": "SetAsAdmin", "data": {}, status="UserDoesNotExist"}
                    </t>
                    <t>
                        If the requested user is already an admin, (i.e. client set self as an admin):
                    </t>
                    <t>
                        {"mtp": "SetAsAdmin", "data": {}, status="AlreadyAdmin"}
                    </t>
                    <texttable title="SetAsAdmin Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>

                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SetAsAdmin messages have this value set to "SetAsAdmin"</c>
        
                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "UserDoesNotExist", "NotAdminError", "AlreadyAdmin". 
                            Status of the KickUser message previously sent by the client.</c>
                    </texttable>
                </section>
                <section anchor="ServerMessage" title="ServerMessage">
                    <t>
                        This is the message sent by the server to the client for general purposes (e.g. announcements).
                    </t>
                    <t>
                        {"mtp": "ServerMessage", "data": {"message": "user has been kicked from the server."}}
                    </t>
                    <texttable title="ServerMessage Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>

                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All ServerMessage messages have this value set to "ServerMessage"</c>

                        <c>message</c>
                        <c>string</c>
                        <c>Message content</c>
                    </texttable>
                </section>
                <section anchor="ServerDisconnect" title="Disconnect">
                    <t>
                        This is the message sent by the server on terminating the connection. The reason for
                        disconnecting is also included in the message.
                    </t>
                    <t>
                        {"mtp": "Disconnect", "data": {"message": "Server closing."}}
                    </t>
                    <texttable title="Disconnect Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>

                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Disconnect messages have this value set to "Disconnect"</c>

                        <c>message</c>
                        <c>string</c>
                        <c>Reason for disconnecting.</c>
                    </texttable>
                </section>
            </section>
            <section anchor="peer2peer" title="Peer-Peer Messages">
                <section anchor="Discovery" title="Discovery">
                    <t>
                        Type: Broadcasted
                    </t>
                    <t>
                        Discovery message is sent to the broadcast network to ping the list of active peers.
                        This queries the hostnames and usernames of these peers. This is not completely necessary 
                        to implement if you will add a feature that will connect the peer to another by manually
                        inputting the ip and port of the peer. However, it is strongly recommended you implement
                        this message to ensure smooth testing.
                    </t>
                    <t>
                        {"mtp": "Discovery", "data": {"ip": "192.168.1.1", "port": 15151}}
                    </t>
                    <texttable title="Discovery Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Discovery messages have this value set to "Discovery"</c>
        
                        <c>ip</c>
                        <c>string</c>
                        <c>IP of the querying peer.</c>
        
                        <c>port</c>
                        <c>integer</c>
                        <c>Port of the querying peer.</c>
                    </texttable>
                </section>
                <section anchor="DiscoveryResponse" title="DiscoveryResponse">
                    <t>
                        Type: Direct / Single
                    </t>
                    <t>
                        DiscoveryResponse is sent by peers who are active in the network.
                    </t>
                    <t>
                        {"mtp": "DiscoveryResponse", "data": {"ip": "192.168.1.1", "port": 15151,"name": "username"}}
                    </t>
                    <texttable title="DiscoveryResponse Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All DiscoveryResponse messages have this value set to "DiscoveryResponse"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Username of the responding peer.</c>
        
                        <c>ip</c>
                        <c>string</c>
                        <c>IP of the responding peer.</c>
        
                        <c>port</c>
                        <c>string</c>
                        <c>Port of the responding peer.</c>
                    </texttable>
                </section>
                <section anchor="Handshake" title="Handshake">
                    <t>
                        Type: Broadcasted
                    </t>
                    <t>
                        The handshake message is required to be sent for each scenario wherein a new peer-peer
                        joins a network. There may be peers active in the network or not but this message type 
                        attempts to ensure that the username to be used by the entering peer is not a duplicate
                        of another user existing in the network.
                    </t>
                    <t>
                        {"mtp": "Handshake", "data": {"ip": "192.168.0.1", "port": 15151, "name": "new_peer"}}
                    </t>
                    <texttable title="Handshake Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Handshake messages have this value set to "Handshake"</c>
        
                        <c>ip</c>
                        <c>string</c>
                        <c>IP of the peer broadcasting the Handshake</c>
        
                        <c>port</c>
                        <c>integer</c>
                        <c>Port of the peer broadcasting the Handshake.</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Username that is being broadcasted to all the other peers in the network for validation.</c>
                    </texttable>
                </section>
                <section anchor="HandshakeResponse" title="HandshakeResponse">
                    <t>
                        Type: Direct / Single
                    </t>
                    <t>
                        The Handshake Response is sent back by peers active in the network to the ip and port 
                        found in the Handshake message sent by new peers attempting to join the network. This 
                        message type can only be sent if the peer is considered as active in the network and 
                        the peer has a valid username.
                    </t>
                    <t>
                        If the username contained in the Handshake is not equal to the username held by the 
                        responding peer:
                        {"mtp": "HandshakeResponse", "data": {"name": "username"}, "status": "OK"}
                    </t>
                    <t>
                        If the username contained in the Handshake is equal to the username held by the 
                        responding peer:
                        {"mtp": "HandshakeResponse", "data": {"name": "username"}, "status": "DuplicateError"}
                    </t>
                    <texttable title="HandshakeResponse Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All HandshakeResponse messages have this value set to "HandshakeResponse"</c>
        
                        <c>name</c>
                        <c>string</c>
                        <c>Accepted/Rejected username.</c>
        
                        <c>status</c>
                        <c>Enum: String</c>
                        <c>Possible values: "OK", "DuplicateError". Validation status of the Handshake message
                            received prior to sending this message.</c>
                    </texttable>
                </section>
                <section anchor="PeerSendChat" title="SendChat">
                    <t>
                        Type: Broadcasted
                    </t>
                    <t>
                        SendChat is a message format for general chat messages.
                    </t>
                    <t>
                        {"mtp": "SendChat", "data": {"message": "hi"}}
                    </t>
                    <texttable title="SendChat Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All SendChat messages have this value set to "SendChat"</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>Message content.</c>
                    </texttable>
                </section>
                <section anchor="Whisper" title="Whisper">
                    <t>
                        Type: Direct / Single
                    </t>
                    <t>
                        Whisper is a message format for private chat messages.
                    </t>
                    <t>
                        {"mtp": "Whisper", "data": {"message": "hi"}}
                    </t>
                    <texttable title="Whisper Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Whisper messages have this value set to "Whisper"</c>
        
                        <c>message</c>
                        <c>string</c>
                        <c>Private message content.</c>
                    </texttable>
                </section>
                <section anchor="PeerDisconnect" title="Disconnect">
                    <t>
                        Type: Broadcasted
                    </t>
                    <t>
                        Peers send a Disconnect message to inform other peers on leaving the network.
                    </t>
                    <t>
                        {"mtp": "Disconnect", "data": {}}
                    </t>
                    <texttable title="Disconnect Fields">
                        <ttcol>Field Name</ttcol>
                        <ttcol>Data Type</ttcol>
                        <ttcol align="center">Description</ttcol>
        
                        <c>mtp</c>
                        <c>string</c>
                        <c>MessageType. All Disconnect messages have this value set to "Disconnect"</c>
                    </texttable>
                </section>
            </section>
        </section>
        <section anchor="server-client" title="Server-Client Model">
            <section anchor="server-client-state" title="States / Phases">
                <section anchor="server-client-state-login" title="Login">
                    <t>
                        Description here
                        <figure anchor="login-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>---------| Login |--------->|  Server  |
    +----------+      username: "Daren"      +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;---| AssignUsername |----&lt;&lt;|  Server  |
    +----------+         status: "OK"        +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;------------------------->>|  Server  |
    +----------+          Connected          +----------+
                            </artwork>
                        </figure>
                    </t>
                </section>
            </section>
            <section anchor="server-client-behavior" title="Request-Response Behavior">
                <section anchor="server-client-behavior-changename" title="SetUsername">
                    <t>
                        Description here
                        <figure anchor="SetUsername-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>------| SetUsername |------>|  Server  |
    +----------+      SetUsername: "Daren"   +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;-----| SetUsername |-----&lt;&lt;|  Server  |
    +----------+         status: "OK"        +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;-----| SetUsername |-----&lt;&lt;|  Server  |
    +----------+     status: "DuplicateError"+----------+
                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-userinfo" title="UserInfo">
                    <t>
                        Description here
                        <figure anchor="Userinfo-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>----| RequestUserInfo |---->|  Server  |
    +----------+      SetUsername: "Daren"   +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;---| ProvideUserInfo |---&lt;&lt;|  Server  |
    +----------+         status: "OK"        +----------+

     +----------+                             +----------+
    |  Client  |&lt;&lt;---| ProvideUserInfo |---&lt;&lt;|  Server  |
    +----------+   status: "UserDoesNotExist" +----------+

                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-localtime" title="LocalTime">
                    <t>
                        Description here
                        <figure anchor="Localtime-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>----| RequestLocalTime |--->|  Server  |
    +----------+                             +----------+

    +----------+                             +----------+
    |  Client  |&lt;&lt;---| SendLocalTime |---&lt;&lt;|  Server  |
    +----------+       time: "00:00:00"      +----------+



                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-whisper" title="Whisper">
                    <t>
                        Description here
                        <figure anchor="Whisper-diagram">
                            <artwork>
    +----------+                           +----------+    +----------+
    |  Client  |>----| WhisperToUser |---->|  Server  |    | Client_B |
    +----------+        To: "Client_B"     +----------+    +----------+

    +----------+                           +----------+ msg +----------+
    |  Client  |                           |  Server  |---->| Client_B |
    +----------+                           +----------+     +----------+

    +----------+                           +----------+     +----------+
    |  Client  |&lt;&lt;---| ServerMessage |---&lt;&lt;|  Server  |     | Client_B |
    +----------+ message:"UserDoesNotExist"+----------+     +----------+



                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-sendchat" title="SendChat">
                    <t>
                        Description here
                        <figure anchor="SendChat-diagram">
                            <artwork>
+----------+          +---------+
|          | SendChat |         |
|  Client1 +--------->+ Server  |
|          |   msg    |         |
+----------+          +----+----+
                           |
                           |
             +----------------------------+
             |             |              |
             |             |              |
             |msg          |msg           |msg
             |             v              v
       +-----v-----+ +-----+-----+  +-----+-----+
       |           | |           |  |           |
       |  Client2  | |  Client3  |  |  Client4  |
       |           | |           |  |           |
       +-----------+ +-----------+  +-----------+


                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-onlinelist" title="OnlineList">
                    <t>
                        Description here
                        <figure anchor="OnlineList-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>---| RequestOnlineList |--->|  Server  |
    +----------+                             +----------+

    +----------+                            +----------+
    |  Client  |&lt;&lt;---| SendOnlineList |---&lt;&lt;|  Server  |
    +----------+                            +----------+



                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-disconnect" title="Disconnect">
                    <t>
                        Description here
                        <figure anchor="Disconnect-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>-------| Disconnect |------>|  Server  |
    +----------+                             +----------+

                                             +----------+
                                             |  Server  |
                                             +----------+



                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-kickuser" title="KickUser">
                    <t>
                        Description here
                        <figure anchor="KickUser-diagram">
                            <artwork>
    +----------+                             +----------+
    |  Client  |>--------| KickUser |------->|  Server  |
    +----------+      name : "Client2"       +----------+

    +----------+                            +----------+
    |  Client  |&lt;&lt;------| KickUser |------&lt;&lt;|  Server  |
    +----------+      status : "OK"         +----------+
    
    +----------+                            +----------+
    |  Client  |&lt;&lt;------| KickUser |------&lt;&lt;|  Server  |
    +----------+  status : "NotAdminError"  +----------+

    +----------+                            +----------+
    |  Client  |&lt;&lt;------| KickUser |------&lt;&lt;|  Server  |
    +----------+ status : "UserDoesNotExist"+----------+



                            </artwork>
                        </figure>
                    </t>
                </section>
                <section anchor="server-client-behavior-muteuser" title="MuteUser">
                    <t>
                        Placeholder
                    </t>
                </section>
                <section anchor="server-client-behavior-unmuteuser" title="UnmuteUser">
                    <t>
                        Placeholder
                    </t>
                </section>
                <section anchor="server-client-behavior-setasadmin" title="SetAsAdmin">
                    <t>
                        Placeholder
                    </t>
                </section>
            </section>
        </section>
        <section anchor="peer-peer" title="Peer-Peer Model">
            <section anchor="peer-peer-discovery" title="Discovery">
                <t>
                    Placeholder
                </t>
            </section>
            <section anchor="peer-peer-handshake" title="Handshake">
                <t>
                    Placeholder
                </t>
            </section>
            <section anchor="peer-peer-disconnect" title="Disconnect">
                <t>
                    Placeholder
                </t>
            </section>
        </section>
        <section anchor="security" title="Security Considerations">
            <section anchor="security-intro" title="Introduction">
                <t>
                    This protocol will raise plenty of security vulnerabilities. This is
                    expected as security was never considered in designing this protocol.
                    This section will simply discuss some of possible vulnerabilities.
                </t>
            </section>
            <section anchor="security-authentication" title="Authentication">
                <t>
                    There is no form of authentication in this protocol. The chat system is
                    not anonymous yet anyone can choose a name.
                </t>
            </section>
            <section anchor="security-encryption" title="Encryption">
                <t>
                    Private messages are easily sniffed by a packet sniffer like Wireshark. 
                    The private messages are sent in plaintext and are therefore not secure.
                </t>
            </section>
            <section anchor="security-authenticity" title="Authenticity">
                <t>
                    There is no method to ensure that the data has not been tampered with. There
                    is no form of encrypted checksum encoded in the message.
                </t>
            </section>
        </section>
    </middle>

    <back>
        <references title="Normative References">
            <reference anchor="RFC3470">
                <front>
                    <title>Guidelines for the Use of Extensible Markup Language (XML)
                        within IETF Protocols</title>
                    <author initials="S." surname="Hollenbeck" fullname="Scott Hollenbeck">
                        <organization abbrev="VeriSign, Inc.">VeriSign, Incorporated</organization>
                    </author>
                    <author initials="M." surname="Rose" fullname="Marshall T. Rose">
                        <organization abbrev="Dover Beach Consulting, Inc.">Dover Beach Consulting, Incorporated</organization>
                    </author>
                    <author initials="L." surname="Masinter" fullname="Larry Masinter">
                        <organization abbrev="Adobe Systems Inc.">Adobe Systems Incorporated</organization>
                    </author>
                    <date year="2013" month="May" />
                </front>
                <seriesInfo name="RFC" value="3470" />
                <annotation>This is a primary reference work.</annotation>
            </reference>
        </references>

        <references title="Informative References">
            <reference anchor="RFC6949">
                <front>
                    <title>RFC Series Format Requirements and Future Development</title>
                    <author initials="H." surname="Flanagan" fullname="H. Flanagan">
                        <organization />
                    </author>
                    <author initials="N." surname="Brownlee" fullname="N. Brownlee">
                        <organization />
                    </author>
                    <date year="2013" month="May" />
                </front>
                <seriesInfo name="RFC" value="6949" />
                <annotation>This is a primary reference work.</annotation>
            </reference>
        </references>
    </back>
</rfc>